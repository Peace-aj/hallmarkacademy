generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Administration {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String?
  role      Roles
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
}

model School {
  id                 String         @id @default(cuid())
  name               String         @unique
  subtitle           String?
  schooltype         String
  email              String         @unique
  phone              String?        @unique
  address            String
  contactperson      String?
  contactpersonphone String?
  contactpersonemail String?
  youtube            String?
  facebook           String?
  regnumbercount     Int?
  regnumberappend    String?
  regnumberprepend   String?
  logo               String?
  students           Student[]
  teachers           Teacher[]
  subjects           Subject[]
  paymentsetups      PaymentSetup[]
  payments           Payment[]
  createdAt          DateTime       @default(now())
  updateAt           DateTime       @default(now())
}

model Student {
  id              String               @id @default(cuid())
  username        String               @unique
  admissionnumber String               @unique
  firstname       String
  surname         String
  othername       String?
  birthday        DateTime
  gender          UserSex
  religion        String?
  studenttype     String
  house           String
  bloodgroup      String
  admissiondate   DateTime             @default(now())
  email           String               @unique
  phone           String?              @unique
  address         String
  state           String
  lga             String
  avarta          String?
  password        String?
  parentid        String
  parent          Parent               @relation(fields: [parentid], references: [id])
  schoolid        String
  school          School               @relation(fields: [schoolid], references: [id])
  classid         String
  class           Class                @relation(fields: [classid], references: [id])
  attendances     Attendance[]
  assignments     Assignment[]
  submissions     Submission[]
  answers         Answer[]
  grades          StudentGrade[]
  effective       EffectiveDomain[]
  psychomotive    PsychomotiveDomain[]
  payments        Payment[]
  createdAt       DateTime             @default(now())
  updateAt        DateTime             @default(now())
}

model Teacher {
  id          String       @id @default(cuid())
  username    String       @unique
  title       String
  firstname   String
  surname     String
  othername   String?
  birthday    DateTime?
  bloodgroup  String?
  gender      UserSex
  state       String
  lga         String
  email       String       @unique
  phone       String?      @unique
  address     String
  avarta      String?
  password    String?
  schoolid    String
  school      School       @relation(fields: [schoolid], references: [id])
  subjects    Subject[]
  classes     Class[]
  lessons     Lesson[]
  assignments Assignment[]
  tests       Test[]
  createdAt   DateTime     @default(now())
  updateAt    DateTime     @default(now())
}

model Parent {
  id         String    @id @default(cuid())
  username   String    @unique
  title      String
  firstname  String
  surname    String
  othername  String?
  birthday   DateTime?
  bloodgroup String?
  gender     UserSex
  occupation String
  religion   String
  state      String
  lga        String
  email      String    @unique
  phone      String    @unique
  address    String
  password   String?
  students   Student[]
  createdAt  DateTime  @default(now())
  updateAt   DateTime  @default(now())
}

model Subject {
  id          String         @id @default(cuid())
  name        String
  category    String
  schoolid    String
  school      School         @relation(fields: [schoolid], references: [id])
  teachers    Teacher[]
  assignments Assignment[]
  lessons     Lesson[]
  grades      SubjectGrade[]
  tests       Test[]
  createdAt   DateTime       @default(now())
  updateAt    DateTime       @default(now())
}

model Class {
  id            String         @id @default(cuid())
  name          String         @unique
  category      String
  level         String
  capacity      Int?
  formmasterid  String?
  formmaster    Teacher?       @relation(fields: [formmasterid], references: [id])
  students      Student[]
  gradings      ClassGrade[]
  lessons       Lesson[]
  events        Event[]
  announcements Announcement[]
  createdAt     DateTime       @default(now())
  updateAt      DateTime       @default(now())
}

model PaymentSetup {
  id          String   @id @default(cuid())
  amount      Int
  fees        Int
  partpayment Boolean  @default(true)
  session     String
  term        String
  schoolid    String
  school      School   @relation(fields: [schoolid], references: [id])
  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now())
}

model Term {
  id        String     @id @default(cuid())
  start     DateTime
  end       DateTime
  nextterm  DateTime
  daysopen  Int
  session   String
  term      Terms
  status    TermStatus
  createdAt DateTime   @default(now())
  updateAt  DateTime   @default(now())
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectid   String
  subject     Subject      @relation(fields: [subjectid], references: [id])
  classid     String
  class       Class        @relation(fields: [classid], references: [id])
  teacherid   String
  teacher     Teacher      @relation(fields: [teacherid], references: [id])
  attendances Attendance[]
}

model Payment {
  id        String   @id @default(cuid())
  session   String
  term      Terms
  amount    Int
  schoolid  String
  school    School   @relation(fields: [schoolid], references: [id])
  studentid String
  student   Student  @relation(fields: [studentid], references: [id])
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  text        String
  file        String
  duedate     DateTime
  graded      Boolean
  subjectid   String
  subject     Subject      @relation(fields: [subjectid], references: [id])
  teacherid   String
  teacher     Teacher      @relation(fields: [teacherid], references: [id])
  submissions Submission[]
  students    Student[]
  createdAt   DateTime     @default(now())
  updateAt    DateTime     @default(now())
}

model Test {
  id           String     @id @default(cuid())
  title        String
  status       TestStatus
  instructions String
  duration     Int
  maxscore     Int
  open         Boolean
  testdate     DateTime
  testtime     DateTime
  term         String
  questions    Question[]
  answers      Answer[]
  subjectid    String
  subject      Subject    @relation(fields: [subjectid], references: [id])
  teacherid    String
  teacher      Teacher    @relation(fields: [teacherid], references: [id])
  createdAt    DateTime   @default(now())
  updateAt     DateTime   @default(now())
}

model Question {
  id      String @id @default(cuid())
  text    String //the test question
  options Json
  answer  String //the correct answer to the question
  testid  String
  test    Test   @relation(fields: [testid], references: [id])
}

model Answer {
  id        String   @id @default(cuid())
  score     Int
  testid    String
  test      Test     @relation(fields: [testid], references: [id])
  studentid String
  student   Student  @relation(fields: [studentid], references: [id])
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
}

model Submission {
  id           String      @id @default(cuid())
  answer       String
  feedback     String
  score        Int
  file         String
  assignmentId String?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
  createdAt    DateTime    @default(now())
  updateAt     DateTime    @default(now())
}

model Grade {
  id           String               @id @default(cuid())
  title        String
  session      String
  term         String
  gradings     ClassGrade[]
  effective    EffectiveDomain[]
  psychomotive PsychomotiveDomain[]
  createdAt    DateTime             @default(now())
  updateAt     DateTime             @default(now())
}

model ClassGrade {
  id       String         @id @default(cuid())
  classid  String
  class    Class          @relation(fields: [classid], references: [id])
  gradeid  String
  grade    Grade          @relation(fields: [gradeid], references: [id])
  subjects SubjectGrade[]
}

model SubjectGrade {
  id        String         @id @default(cuid())
  subjectid String
  subject   Subject        @relation(fields: [subjectid], references: [id])
  classid   String
  class     ClassGrade     @relation(fields: [classid], references: [id])
  students  StudentGrade[]
}

model StudentGrade {
  id             String       @id @default(cuid())
  firstCa        Int
  secondCa       Int
  thirdCa        Int
  fourthCa       Int
  exams          Int
  score          Int
  grade          Int
  remark         Int
  studentid      String
  student        Student      @relation(fields: [studentid], references: [id])
  subjectgradeid String
  subjectGrade   SubjectGrade @relation(fields: [subjectgradeid], references: [id])
}

model EffectiveDomain {
  id              String  @id @default(cuid())
  classattendance Int
  punctuality     Int
  initiative      Int
  responsibility  Int
  neatness        Int
  cooperation     Int
  organization    Int
  studentid       String
  student         Student @relation(fields: [studentid], references: [id])
  gradeid         String
  grade           Grade   @relation(fields: [gradeid], references: [id])
}

model PsychomotiveDomain {
  id          String  @id @default(cuid())
  hardworking Int
  sports      Int
  studentid   String
  student     Student @relation(fields: [studentid], references: [id])
  gradeid     String
  grade       Grade   @relation(fields: [gradeid], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     String?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     String?
  class       Class?   @relation(fields: [classId], references: [id])
}

model News {
  id          String      @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  author      String
  category    NewsCategory
  status      NewsStatus  @default(DRAFT)
  featured    Boolean     @default(false)
  image       String?
  readTime    Int?        // in minutes
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Gallery {
  id          String      @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  category    GalleryCategory
  isActive    Boolean     @default(true)
  order       Int?        // for sorting
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Roles {
  Admin
  Super
  Management
}

enum TestStatus {
  Completed
  Cancelled
  Pending
}

enum TermStatus {
  Active
  Inactive
}

enum Terms {
  First
  Second
  Third
}

enum NewsCategory {
  ACHIEVEMENT
  SPORTS
  FACILITIES
  ARTS
  EDUCATION
  COMMUNITY
  GENERAL
}

enum NewsStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum GalleryCategory {
  CAROUSEL
  LOGO
  FACILITIES
  EVENTS
  STUDENTS
  TEACHERS
  ACHIEVEMENTS
  GENERAL
}